template<>
struct tuple<>
{

    template<size_t I, derived_from<tuple> Self> requires (I < 0uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0>
struct tuple<T0>
{
    RUZHOUXIE(no_unique_address) T0 e0;

    template<size_t I, derived_from<tuple> Self> requires (I < 1uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1>
struct tuple<T0, T1>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;

    template<size_t I, derived_from<tuple> Self> requires (I < 2uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2>
struct tuple<T0, T1, T2>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;

    template<size_t I, derived_from<tuple> Self> requires (I < 3uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3>
struct tuple<T0, T1, T2, T3>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;

    template<size_t I, derived_from<tuple> Self> requires (I < 4uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3, class T4>
struct tuple<T0, T1, T2, T3, T4>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;
    RUZHOUXIE(no_unique_address) T4 e4;

    template<size_t I, derived_from<tuple> Self> requires (I < 5uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
        else if constexpr(I == 4uz) return FWD(self, e4);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3, class T4, class T5>
struct tuple<T0, T1, T2, T3, T4, T5>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;
    RUZHOUXIE(no_unique_address) T4 e4;
    RUZHOUXIE(no_unique_address) T5 e5;

    template<size_t I, derived_from<tuple> Self> requires (I < 6uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
        else if constexpr(I == 4uz) return FWD(self, e4);
        else if constexpr(I == 5uz) return FWD(self, e5);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6>
struct tuple<T0, T1, T2, T3, T4, T5, T6>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;
    RUZHOUXIE(no_unique_address) T4 e4;
    RUZHOUXIE(no_unique_address) T5 e5;
    RUZHOUXIE(no_unique_address) T6 e6;

    template<size_t I, derived_from<tuple> Self> requires (I < 7uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
        else if constexpr(I == 4uz) return FWD(self, e4);
        else if constexpr(I == 5uz) return FWD(self, e5);
        else if constexpr(I == 6uz) return FWD(self, e6);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;
    RUZHOUXIE(no_unique_address) T4 e4;
    RUZHOUXIE(no_unique_address) T5 e5;
    RUZHOUXIE(no_unique_address) T6 e6;
    RUZHOUXIE(no_unique_address) T7 e7;

    template<size_t I, derived_from<tuple> Self> requires (I < 8uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
        else if constexpr(I == 4uz) return FWD(self, e4);
        else if constexpr(I == 5uz) return FWD(self, e5);
        else if constexpr(I == 6uz) return FWD(self, e6);
        else if constexpr(I == 7uz) return FWD(self, e7);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;
    RUZHOUXIE(no_unique_address) T4 e4;
    RUZHOUXIE(no_unique_address) T5 e5;
    RUZHOUXIE(no_unique_address) T6 e6;
    RUZHOUXIE(no_unique_address) T7 e7;
    RUZHOUXIE(no_unique_address) T8 e8;

    template<size_t I, derived_from<tuple> Self> requires (I < 9uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
        else if constexpr(I == 4uz) return FWD(self, e4);
        else if constexpr(I == 5uz) return FWD(self, e5);
        else if constexpr(I == 6uz) return FWD(self, e6);
        else if constexpr(I == 7uz) return FWD(self, e7);
        else if constexpr(I == 8uz) return FWD(self, e8);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;
    RUZHOUXIE(no_unique_address) T4 e4;
    RUZHOUXIE(no_unique_address) T5 e5;
    RUZHOUXIE(no_unique_address) T6 e6;
    RUZHOUXIE(no_unique_address) T7 e7;
    RUZHOUXIE(no_unique_address) T8 e8;
    RUZHOUXIE(no_unique_address) T9 e9;

    template<size_t I, derived_from<tuple> Self> requires (I < 10uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
        else if constexpr(I == 4uz) return FWD(self, e4);
        else if constexpr(I == 5uz) return FWD(self, e5);
        else if constexpr(I == 6uz) return FWD(self, e6);
        else if constexpr(I == 7uz) return FWD(self, e7);
        else if constexpr(I == 8uz) return FWD(self, e8);
        else if constexpr(I == 9uz) return FWD(self, e9);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;
    RUZHOUXIE(no_unique_address) T4 e4;
    RUZHOUXIE(no_unique_address) T5 e5;
    RUZHOUXIE(no_unique_address) T6 e6;
    RUZHOUXIE(no_unique_address) T7 e7;
    RUZHOUXIE(no_unique_address) T8 e8;
    RUZHOUXIE(no_unique_address) T9 e9;
    RUZHOUXIE(no_unique_address) T10 e10;

    template<size_t I, derived_from<tuple> Self> requires (I < 11uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
        else if constexpr(I == 4uz) return FWD(self, e4);
        else if constexpr(I == 5uz) return FWD(self, e5);
        else if constexpr(I == 6uz) return FWD(self, e6);
        else if constexpr(I == 7uz) return FWD(self, e7);
        else if constexpr(I == 8uz) return FWD(self, e8);
        else if constexpr(I == 9uz) return FWD(self, e9);
        else if constexpr(I == 10uz) return FWD(self, e10);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;
    RUZHOUXIE(no_unique_address) T4 e4;
    RUZHOUXIE(no_unique_address) T5 e5;
    RUZHOUXIE(no_unique_address) T6 e6;
    RUZHOUXIE(no_unique_address) T7 e7;
    RUZHOUXIE(no_unique_address) T8 e8;
    RUZHOUXIE(no_unique_address) T9 e9;
    RUZHOUXIE(no_unique_address) T10 e10;
    RUZHOUXIE(no_unique_address) T11 e11;

    template<size_t I, derived_from<tuple> Self> requires (I < 12uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
        else if constexpr(I == 4uz) return FWD(self, e4);
        else if constexpr(I == 5uz) return FWD(self, e5);
        else if constexpr(I == 6uz) return FWD(self, e6);
        else if constexpr(I == 7uz) return FWD(self, e7);
        else if constexpr(I == 8uz) return FWD(self, e8);
        else if constexpr(I == 9uz) return FWD(self, e9);
        else if constexpr(I == 10uz) return FWD(self, e10);
        else if constexpr(I == 11uz) return FWD(self, e11);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;
    RUZHOUXIE(no_unique_address) T4 e4;
    RUZHOUXIE(no_unique_address) T5 e5;
    RUZHOUXIE(no_unique_address) T6 e6;
    RUZHOUXIE(no_unique_address) T7 e7;
    RUZHOUXIE(no_unique_address) T8 e8;
    RUZHOUXIE(no_unique_address) T9 e9;
    RUZHOUXIE(no_unique_address) T10 e10;
    RUZHOUXIE(no_unique_address) T11 e11;
    RUZHOUXIE(no_unique_address) T12 e12;

    template<size_t I, derived_from<tuple> Self> requires (I < 13uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
        else if constexpr(I == 4uz) return FWD(self, e4);
        else if constexpr(I == 5uz) return FWD(self, e5);
        else if constexpr(I == 6uz) return FWD(self, e6);
        else if constexpr(I == 7uz) return FWD(self, e7);
        else if constexpr(I == 8uz) return FWD(self, e8);
        else if constexpr(I == 9uz) return FWD(self, e9);
        else if constexpr(I == 10uz) return FWD(self, e10);
        else if constexpr(I == 11uz) return FWD(self, e11);
        else if constexpr(I == 12uz) return FWD(self, e12);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;
    RUZHOUXIE(no_unique_address) T4 e4;
    RUZHOUXIE(no_unique_address) T5 e5;
    RUZHOUXIE(no_unique_address) T6 e6;
    RUZHOUXIE(no_unique_address) T7 e7;
    RUZHOUXIE(no_unique_address) T8 e8;
    RUZHOUXIE(no_unique_address) T9 e9;
    RUZHOUXIE(no_unique_address) T10 e10;
    RUZHOUXIE(no_unique_address) T11 e11;
    RUZHOUXIE(no_unique_address) T12 e12;
    RUZHOUXIE(no_unique_address) T13 e13;

    template<size_t I, derived_from<tuple> Self> requires (I < 14uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
        else if constexpr(I == 4uz) return FWD(self, e4);
        else if constexpr(I == 5uz) return FWD(self, e5);
        else if constexpr(I == 6uz) return FWD(self, e6);
        else if constexpr(I == 7uz) return FWD(self, e7);
        else if constexpr(I == 8uz) return FWD(self, e8);
        else if constexpr(I == 9uz) return FWD(self, e9);
        else if constexpr(I == 10uz) return FWD(self, e10);
        else if constexpr(I == 11uz) return FWD(self, e11);
        else if constexpr(I == 12uz) return FWD(self, e12);
        else if constexpr(I == 13uz) return FWD(self, e13);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;
    RUZHOUXIE(no_unique_address) T4 e4;
    RUZHOUXIE(no_unique_address) T5 e5;
    RUZHOUXIE(no_unique_address) T6 e6;
    RUZHOUXIE(no_unique_address) T7 e7;
    RUZHOUXIE(no_unique_address) T8 e8;
    RUZHOUXIE(no_unique_address) T9 e9;
    RUZHOUXIE(no_unique_address) T10 e10;
    RUZHOUXIE(no_unique_address) T11 e11;
    RUZHOUXIE(no_unique_address) T12 e12;
    RUZHOUXIE(no_unique_address) T13 e13;
    RUZHOUXIE(no_unique_address) T14 e14;

    template<size_t I, derived_from<tuple> Self> requires (I < 15uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
        else if constexpr(I == 4uz) return FWD(self, e4);
        else if constexpr(I == 5uz) return FWD(self, e5);
        else if constexpr(I == 6uz) return FWD(self, e6);
        else if constexpr(I == 7uz) return FWD(self, e7);
        else if constexpr(I == 8uz) return FWD(self, e8);
        else if constexpr(I == 9uz) return FWD(self, e9);
        else if constexpr(I == 10uz) return FWD(self, e10);
        else if constexpr(I == 11uz) return FWD(self, e11);
        else if constexpr(I == 12uz) return FWD(self, e12);
        else if constexpr(I == 13uz) return FWD(self, e13);
        else if constexpr(I == 14uz) return FWD(self, e14);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
{
    RUZHOUXIE(no_unique_address) T0 e0;
    RUZHOUXIE(no_unique_address) T1 e1;
    RUZHOUXIE(no_unique_address) T2 e2;
    RUZHOUXIE(no_unique_address) T3 e3;
    RUZHOUXIE(no_unique_address) T4 e4;
    RUZHOUXIE(no_unique_address) T5 e5;
    RUZHOUXIE(no_unique_address) T6 e6;
    RUZHOUXIE(no_unique_address) T7 e7;
    RUZHOUXIE(no_unique_address) T8 e8;
    RUZHOUXIE(no_unique_address) T9 e9;
    RUZHOUXIE(no_unique_address) T10 e10;
    RUZHOUXIE(no_unique_address) T11 e11;
    RUZHOUXIE(no_unique_address) T12 e12;
    RUZHOUXIE(no_unique_address) T13 e13;
    RUZHOUXIE(no_unique_address) T14 e14;
    RUZHOUXIE(no_unique_address) T15 e15;

    template<size_t I, derived_from<tuple> Self> requires (I < 16uz)
    friend constexpr auto&& get(Self&& self) noexcept
    {
        if constexpr(I == 0uz) return FWD(self, e0);
        else if constexpr(I == 1uz) return FWD(self, e1);
        else if constexpr(I == 2uz) return FWD(self, e2);
        else if constexpr(I == 3uz) return FWD(self, e3);
        else if constexpr(I == 4uz) return FWD(self, e4);
        else if constexpr(I == 5uz) return FWD(self, e5);
        else if constexpr(I == 6uz) return FWD(self, e6);
        else if constexpr(I == 7uz) return FWD(self, e7);
        else if constexpr(I == 8uz) return FWD(self, e8);
        else if constexpr(I == 9uz) return FWD(self, e9);
        else if constexpr(I == 10uz) return FWD(self, e10);
        else if constexpr(I == 11uz) return FWD(self, e11);
        else if constexpr(I == 12uz) return FWD(self, e12);
        else if constexpr(I == 13uz) return FWD(self, e13);
        else if constexpr(I == 14uz) return FWD(self, e14);
        else if constexpr(I == 15uz) return FWD(self, e15);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

